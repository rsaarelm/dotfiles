#!/usr/bin/env python3

# Graph flattener for C/C++ file dependencies.
#
# Uses gcc -M
#
# Put all necessary include path dependencies (-I[path]) in $CFLAGS before
# running

# Handy CFLAGS generation command:
#     for dir in `find -name '*.hpp' -or -name '*.h' -printf '%h\n' | sort -u`; do export CFLAGS="$CFLAGS -I$dir"; done

from collections import defaultdict
import functools
import mimetypes
import os
import os.path
import re
import subprocess
import sys

# Glob source and header into one file
# XXX: Currently hardcoded to a specific project that uses the subdir pattern.
def simplify(path):
    path = re.sub(r'source/(.*)\.cpp', r'\1', path)
    path = re.sub(r'include/(.*)\.hpp', r'\1', path)
    return path

def read_deps(path):
    text = subprocess.check_output("gcc $CFLAGS -M %s" % path, shell=True)
    ret = []
    try:
        text = text.decode('utf-8')
    except:
        text = text.decode('ascii')
    for line in text.splitlines():
        # First line is for the benefit of Makefiles, "foo.o: foo.cpp \".
        # It has no info we need, so throw it away.
        if ':' in line:
            continue
        # Get rid of the trailing backslashes, also for Makefiles
        if line.endswith('\\'): line = line[:-1]
        # Put in local dependencies but not external ones. External
        # dependencies have absolute paths that start with /.
        for elt in [p for p in line.strip().split() if not p.startswith('/')]: ret.append(elt)
    return ret

def deps_to_dict(path, deps_list):
    """Turn path and dependencies list into dict fragment.

    Recognize a probable self-header and make it depend on the main file so
    it'll show up earlier on the list."""
    def module_name(path):
        return os.path.splitext(os.path.basename(path))[0]

    deps_list = deps_list[:] # Local clone

    mod = module_name(path)
    ret = {}
    same_name_header = [(idx, p) for (idx, p) in enumerate(deps_list) if module_name(p) == mod]
    if same_name_header:
        idx, header_path = same_name_header[0]
        del deps_list[idx]
        ret[header_path] = [path]
    ret[path] = deps_list
    return ret

def saturate(g):
    """Make new graph where each key has all (most) dependencies.

    Detect cyclic dependencies and omit those, result is arbitrarily pruned DAG."""
    dag_dep = defaultdict(set)
    for m in list(g.keys()):
        dag_dep[m] = set()
        open = set(g[m])
        closed = set()

        while open:
            node = open.pop()
            closed.add(node)
            if m in dag_dep[node]:
                # Cycle detected, abandon arc
                continue
            dag_dep[m].add(node)
            try:
                for n in g[node]:
                    if not n in closed:
                        open.add(n)
            except KeyError:
                pass
    return dag_dep

def sort_graph_keys(g):
    def cmp(a, b):
        # Ungraphed are at the end
        if not a in g:
            return 1
        if not b in g:
            return -1
        # Things later on depend on things earlier on
        if b in g[a]:
            return -1
        if a in g[b]:
            return 1
        # Things with more dependencies are earlier.
        return len(g[b]) - len(g[a])
    return sorted(g.keys(), key=functools.cmp_to_key(cmp))

# Dependency graph
graph = {}

# List of modules (combined header and source)
modules = defaultdict(set)

for (dirpath, dirnames, filenames) in os.walk('.'):
    for filename in [f for f in filenames if
            any(f.endswith(x) for x in ('.cpp', '.c', '.cxx', '.C'))]:
        path = os.path.join(dirpath, filename)

        print("Processing %s..." % path, file=sys.stderr)

        if path.startswith('./'): path = path[2:]
        deps = read_deps(path)
        graph.update(deps_to_dict(path, deps))
        for header in deps:
            if not header in graph:
                graph[header] = []

for module in sort_graph_keys(saturate(graph)):
    print(module)
