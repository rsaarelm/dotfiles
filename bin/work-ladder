#!/usr/bin/env python3

# Work timer ladder, inspired by http://markforster.squarespace.com/blog/2021/9/20/using-a-timer.html
# Usage:
#    work-ladder [task]    # Rises forever
#    work-ladder N [task]  # (N is integer) Go up to a N-minute session,
#                          # then go back down to 1 minute

import datetime
import os
import signal
import sys
import time

# Worked 1 h 20 min so far, work for 32 min next.

def minutes_str(min):
    hours = min // 60
    min = min % 60
    ret = ""
    if hours:
        ret += "%s h " % hours
    ret += "%s min" % min
    return ret

def notify(end=False):
    """Blink the screen and print the time to stdout."""
    if end:
        os.system("xrefresh -solid green")
        time.sleep(0.25)
        os.system("xrefresh -solid green")
    else:
        os.system("xrefresh -solid orange")

def ladder_duration(max_session):
    """Compute duration of whole ladder given duration of longest session."""
    # Σ_{i=1}^n i + Σ_{i=1}^{n-1} i

    n = max_session
    return int(.5*(n-1)*n + .5*(n+1)*n)

def print_duration(start_time, title):
    end_time = datetime.datetime.today()
    # VimOutliner clock style duration line
    if title:
        print("%s " % title, end = "")
    print("%s [%s -- %s] ->" % (
        start_time.strftime("%Y-%m-%d"),
        start_time.strftime("%H:%M:%S"),
        end_time.strftime("%H:%M:%S")))

def main(max_session=None, title=None):
    start_time = datetime.datetime.today()

    # Catch ctrl-C
    def handler(*args):
        print()  # Newline after the ^C echoed on terminal.
        print_duration(start_time, title)
        sys.exit(1)
    signal.signal(signal.SIGINT, handler)

    if max_session is not None:
        print("Working for %s" % minutes_str(ladder_duration(max_session)),
                end='', file=sys.stderr)
    else:
        print("Working indefinitely", end='', file=sys.stderr)
    if title:
        print(' on "%s".' % title, file=sys.stderr)
    else:
        print(".", file=sys.stderr)

    ascending = True
    total_work = 0
    duration = 1
    while duration:
        time.sleep(duration * 60)
        total_work += duration
        notify()
        if max_session is not None and duration >= max_session:
            ascending = False
            duration -= 1
        elif not ascending:
            duration -= 1
        else:
            duration += 1
        if duration:
            next_time = datetime.datetime.today() + \
                    datetime.timedelta(minutes=duration)
            print("%s elapsed. Now work for %s to %s." %
                    (minutes_str(total_work), minutes_str(duration),
                        next_time.strftime('%H:%M:%S')),
                    file=sys.stderr)
    notify(end=True)
    print_duration(start_time, title)

if __name__ == '__main__':
    args = sys.argv[1:]

    # If first one parses as integer, take it as max session length
    max_session = None
    try:
        max_session = int(args[0])
        args = args[1:]
    except ValueError:
        pass
    except IndexError:
        pass

    main(max_session, ' '.join(args))
