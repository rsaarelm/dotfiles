#!/usr/bin/python3

# Extremely simple ledger parser
# Reads a text file with a line syntax that can have:
#
#     Regular lines are comments
#
# And two types of data lines:
#
#     Add integer amount of `FOO` that comes from nowhere
#     > FOO 123
#     Buy 15 FOO with 30 BAR
#     > FOO 15  BAR 30
#
# After the ledger is run, balances of all items will be printed.

from collections import defaultdict
import sys

class Ledger:
    def __init__(self, text):
        self.events = []
        # Currencies are used to buy other values
        # To keep the summary shorter, they are not shown if the tally to 0.
        self.currencies = set()

        for line in text.splitlines():
            line = line.strip()
            # Ledger lines must start with '> '
            if not line.startswith('> '):
                continue
            elts = line[2:].split()
            if len(elts) == 0:
                continue
            elif len(elts) in (2, 3, 4):
                self.events.append((elts[0], int(elts[1]), line))
                if len(elts) == 3:
                    self.events.append((elts[2], -int(elts[1]), line))
                elif len(elts) == 4:
                    self.events.append((elts[2], -int(elts[3]), line))
                if len(elts) > 2:
                    self.currencies.add(elts[2])
            else:
                assert False, "Syntax error: %s" % line

    def __str__(self):
        stats = defaultdict(int)
        for (account, change, line) in self.events:
            stats[account] += change
            # Print warning if account goes to negative
            if stats[account] < 0:
                print("*** WARNING *** %s goes to %s at '%s'" %
                        (account, stats[account], line), file=sys.stderr)
        return '\n'.join(["%s: %s" % (account, stats[account]) for account in stats
            if account not in self.currencies or stats[account] != 0])

if __name__ == '__main__':
    print(Ledger(sys.stdin.read()))
