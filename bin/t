#!/usr/bin/env python3
# Time logger
# Inspired by http://messymatters.com/tagtime/

from datetime import datetime, timezone
import collections
import math
import os
import os.path
import time
import random
import sys

AVG_MINUTES = 45

LOG_FILE = os.getenv('T_LOG_FILE', '%s/my-activity.log' % os.getenv('HOME', './'))

def date_str(unixtime):
	tz = datetime.now(timezone.utc).astimezone().tzinfo
	return datetime.fromtimestamp(unixtime, tz).strftime("%Y-%m-%d %H:%M")

class Entry:
	DATE_FMT = "%Y-%m-%dT%H:%M:%S%z"

	@classmethod
	def parse(cls, s):
		parts = s.split()
		# Must have time stamp as first item
		t = datetime.strptime(parts[0], Entry.DATE_FMT)
		unixtime = int(t.timestamp())
		tz = t.tzinfo

		# Must have tag as second item
		tag = parts[1]
		sample_interval = None
		# Sample intervals are encoded as 'working.45'
		if '.' in tag:
			tag, sample_interval = tag.split('.')
			sample_interval = int(sample_interval)

		parts = parts[2:]
		# If the first word of the remaining line parses as integer, that's the count
		count = 1
		try:
			count = float(parts[0])
			parts = parts[1:]
		except:
			pass

		comment = ' '.join(parts)
		if not comment:
			comment = None

		return cls(
				tag,
				count=count,
				comment=comment,
				sample_interval=sample_interval,
				unixtime=unixtime,
				tz=tz)

	def __init__(self, tag, count=1.0, comment=None, sample_interval=None, unixtime=None, tz=None):
		# XXX: Somewhat unintuitive constraint that comment can't start with a
		# whitespace separated integer. Otherwise it might get confused if the
		# count value is missing.
		try:
			x = float(comment.split()[0])
			print("Error: First word of message parses into number, will cause ambiguity with count element");
			assert(False)
		except:
			# Either there was no comment or the first word doesn't parse as integer, all is good
			pass

		if not tz:
			# XXX: Any better way to do this pre-Python 3.6?
			# FIXME: This seems to be broken on Windows
			tz = datetime.now(timezone.utc).astimezone().tzinfo
		if not unixtime:
			unixtime = int(time.time())
		self.tag = tag
		self.count = count
		self.comment = comment
		self.time = unixtime
		self.tz = tz
		# If this is a time use tag, the interval must be set as the used sampling interval in minutes.
		self.sample_interval = sample_interval

	def __str__(self):
		date = datetime.fromtimestamp(self.time, self.tz).strftime(Entry.DATE_FMT)
		tag = self.tag
		if self.sample_interval:
			tag += ".%d" % self.sample_interval
		ret = "%s %s" % (date, tag)

		if float(self.count) != 1.0:
			ret += " %g" % self.count

		if self.comment:
			ret += " %s" % self.comment

		return ret

	def __lt__(self, other):
		return self.time < other.time

NOISE_MAX = 0x7fffffff
def noise(x):
	x = (x >> 13) ^ x;
	return (x * (x * x * 60493 + 19990303) + 1376312589) & NOISE_MAX

def pings(sample_interval, start_time):
	minute = int((start_time + 59) // 60)
	while True:
		if noise(minute) < NOISE_MAX / sample_interval:
			yield minute * 60
		minute += 1

def backpings(sample_interval, start_time):
	minute = int((start_time + 59) // 60)
	while True:
		minute -= 1
		if noise(minute) < NOISE_MAX / sample_interval:
			yield minute * 60

class Log:
	def __init__(self, logpath):
		self.entries = []
		self.clocked = set()
		# Sampling minutes used for new time entries
		self.sample_interval = AVG_MINUTES

		self.logpath = logpath
		try:
			with open(logpath) as f:
				for line in f.readlines():
					line = line.split('#')[0]
					line = line.strip()
					if line:
						self._register_entry(Entry.parse(line))
		except FileNotFoundError:
			pass

	def _register_entry(self, entry):
		self.entries.append(entry)

		# Time points that have been covered by the time tracker already.
		if entry.sample_interval:
			self.clocked.add((entry.time, entry.sample_interval))

	def append(self, entry):
		self._register_entry(entry)
		with open(self.logpath, 'a+') as f:
			print("%s" % entry, file=f)

	def next_ping(self):
		next(pings(self.sample_interval, time_time()))

	def missed_pings(self, max_seconds=24*60*60):
		now = time.time()
		for t in backpings(self.sample_interval, now):
			if (t, self.sample_interval) not in self.clocked and now - t < max_seconds:
				yield t
			else:
				return

	def catch_up(self):
		misses = list(self.missed_pings())
		entries = []
		while misses:
			if len(misses) > 1:
				print("Missing %d tags, write tag in UPPERCASE to mark remaining as that tag" % len(misses))
			print("Enter tag for %s" % date_str(misses[0]))
			tag = input("> ").strip()
			tag = tag.split()
			comment = ' '.join(tag[1:]) or None
			fill = False
			if len(tag) == 0:
				fill=True
				tag = 'n/a'
			else:
				tag = tag[0]
			if tag.isupper():
				fill = True
				tag = tag.lower()
			entries.append(Entry(tag, comment=comment, unixtime=misses[0], sample_interval=self.sample_interval))
			if fill:
				for t in misses[1:]:
					entries.append(Entry(tag, comment=comment, unixtime=t, sample_interval=self.sample_interval))
				break
			else:
				misses = misses[1:]
		entries.sort()
		for e in entries:
			self.append(e)
		print("All caught up.")

	def file_last(self, tag):
		try:
			t = next(self.missed_pings())
			self.append(Entry(tag, unixtime=t, sample_interval=self.sample_interval))
			print("Logged %s for %s" % (tag, date_str(t)))
		except StopIteration:
			print("Already filed latest time item")

	def summary(self):
		result = collections.defaultdict(int)
		for e in self.entries:
			if e.sample_interval:
				# Hours for time items
				result[e.tag] += e.sample_interval / 60.0
			else:
				result[e.tag] += e.count
		return result

def run(sample_interval):
	pings = pings(sample_interval, time.time())

	next_ping = next(pings)
	while True:
		t = time.time()
		if t > next_ping:
			msg("log status for %s" % date_str(next_ping))
			next_ping = next(pings)
		else:
			# Don't sleep more than a minute at a time so as to recover
			# better from daemon machine suspend
			time.sleep(min(next_ping - t + 1, 60))

def msg(text, show_secs=2):
	if os.name == 'nt':
		os.system('%%SystemRoot%%/Sysnative/msg /time:%s "%%username%%" %s' % (show_secs, text))
	else:
		os.system('xmessage -timeout %s %s' % (show_secs, text))

if __name__ == '__main__':
	if len(sys.argv) == 1:
		log = Log(LOG_FILE)
		log.catch_up()
	elif sys.argv[1] == '--daemon':
		# Wait a little bit in case we're starting from .xinit
		time.sleep(2)
		msg("Starting time tracking daemon")
		run(AVG_MINUTES)
	elif sys.argv[1] == '--summary':
		log = Log(LOG_FILE)
		for (k, v) in log.summary().items():
			if k == 'n/a': continue
			print("%s: %g" % (k, v))
	elif len(sys.argv) == 2:
		log = Log(LOG_FILE)
		log.file_last(sys.argv[1])
	elif len(sys.argv) > 2 and not sys.argv[1].startswith('-'):
		# Log a non-time-tracking accomplishment, must have either count or commetn
		log = Log(LOG_FILE)
		tag = sys.argv[1]
		assert('.' not in tag)
		tail = sys.argv[2:]
		count = 1
		try:
			count = float(tail[0])
			tail = tail[1:]
		except:
			pass
		comment = ' '.join(tail) or None
		log.append(Entry(tag, count=count, comment=comment))
	else:
		print("Usage %s (--daemon | [tag [[count] comment]])" % sys.argv[0])
